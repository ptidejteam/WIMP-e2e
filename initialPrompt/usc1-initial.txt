Generate test cases following the use case specifications bellow  and give all the possible payloads:
1. Use Case :Fitbit Sends Data, Buddy Moves
1.1 Precondition
BuddyApp is running
FitbitApp is running
Connections have been initialized
1.2 Basic Flow
1.The WIMP RECEIVES heartrate data FROM fitbit
2.The WIMP VALIDATES THAT heartrate is between 60 and 100 bpm
3.The WIMP SENDS SPEAK command to Buddy with "Normal" message
4. Buddy's mood is SET to NEUTRAL
5. Buddy SPEAKS "Normal"
6.Budd SENDS SPEAK feedback to WIMP
7.The WIMP SENDS MOVE Command to Buddy With distance and speed parameters.
8. Buddy SETS EnableWheels to 1 for both Left and Right Wheels
9. Buddy MOVES with Specified distance and speed.
10. Buddy SENDS MOVE execution feedback to WIMP
11. WIMP RECEIVES MOVE execution feedback from Buddy
12. Buddy's mood is SET to HAPPY
Postcondition
WIMP receives “WHEEL_MOVE_FINISHED” notification status
Buddy's mood is SET to HAPPY
1.3 Bounded Alternative Flow
RFS 1-7
1.IF WIMP receives no heartrate data from Fitbit THEN
2.WIMP SENDS Rotate command to Buddy with angle and rotation speed.
3. Buddy SETS EnableWheels to 1 for both left and right wheels
4. Buddy MOVES with Specified distance and speed.
5.Buddy SENDS ROTATE Execution feedback to WIMP
6. WIMP RECEIVES "WHEEL_MOVE_FINISHED" feedback from Buddy
7. Buddy's mood is SET to NEUTRAL
Postcondition
Mood is set to NEUTRAL
Buddy has spoken "No heartrate data" and sent "Speak Action Completed" back to WIMP
1.4 Specific Alternative Flow
RFS 8
1.IF EnableWheels is not to 1 THEN
2. WIMP displays "Wheels not enabled"warning message.
3.ENDIF
Postcondition
WIMP displays "Wheels not enabled" warning message
please follow the sample output  format  below :
{
"TC_ID":"TC001",
  "name": "move buddy successfully",
  "steps": [
	{
  	"operation": "Get fitbit data",
  	"target": {
    	"protocol": "HTTP",
    	"method": "POST",
    	"name": "Fitbit"
  	},
  	"inputs": {
    	"datatype": "bpm"
  	},
  	"expectations": {
    	"msg": "Receive Fitbit Data"
  	}
	},
	{
  	"operation": "Determine buddy action",
  	"target": "",
  	"inputs": {
    	"data": 130
  	},
  	"expectations": {
    	"msg": "robot must move"
  	}
	},
	{
  	"operation": "Enable_Wheels",
  	"target": {
    	"protocol": "Websocket",
    	"method": "send",
    	"name": "Buddy"
  	},
  	"inputs": {
    	"left": 1,
    	"right": 1
  	},
  	"expectations": {
    	"msg": "WHEEL_MOVE_FINISHED"
  	}
	},
	{
  	"operation": "call move functions",
  	"target": {
    	"protocol": "Websocket",
    	"method": "send",
    	"name": "Buddy"
  	},
  	"inputs": {
    	"distance": 1,
    	"speed": 3
  	},
  	"expectations": {
    	"msg": "WHEEL_MOVE_FINISHED"
  	}
	}
  ]
}
** More informations **
Inputs for Buddy action

1) Rotate
 - void USB.rotateBuddy(Speed, Angle, RspCallback)
 - Purpose: rotate the robot at a given angle and speed
 - Params:
    - Speed (float): give the speed of the rotation of the robot in     deg/s around its vertical axis, between -100°/s and 100°/s (min. absolute speed : 30°/s)
         Speed >0: counter-clockwise, Speed <0: clockwise

    - Angle[optional] (float): give the angle of the rotation of the wheel in degree,

        between –360° and 360°
        If absent, Buddy will rotate indefinitely at the given speed
        RspCallback (IUsbCommadRsp): return
               “OK” when started
               “WHEEL_MOVE_FINISHED” when the move is finished
               "NOK” when fail

2) move:
void USB.moveBuddy(Speed, Distance, RspCallback)
  - Purpose: Move the robot straight at a defined speed and distance
  - Params:
        -> Speed (float): give the speed of the robot in m/s, (+): Forward, (-): Backward, between 0.05m/s to 0.7m/s
        -> Distance[optional] (float): give the distance to reach in meter.
       If absent, Buddy will move indefinitely at the given speed
       RspCallback (IUsbCommadRsp): return

                  - “OK” when launch
                  - “WHEEL_MOVE_FINISHED” when the move is finished
                  - "NOK” when fail

Condition: You have to ENABLE WHEELS before using rotate and move functions.

3) Enable Wheels:
EnableWheels
  -Left (int): enable left wheel (0: Off, 1: On)
  -Right (int): enable right wheel (0: Off, 1: On)
  -RspCallback (IUsbCommadRsp): return
     -“OK” when launch
     -"NOK” when fail

4) speak
    void Speech.startSpeaking(iText, iExpression, iCallback)
    Purpose: Says provided text and make a special mouth movement
    Params:
        iText (string): Text to speak
        IExpression (LabialExpression):
            SPEAK_ANGRY
            NO FACE
            SPEAK HAPPY
            SPEAK NEUTRAL

5)Mood
void UI.setMood(iExpression, iSpeed, IUIFaceAnimationCallback iCallback )
Purpose: Give Buddy different facial expressions and set the LEDs
 Params:
   iExpression (FacialExpression):
     - NONE
     - NEUTRAL
     - GRUMPY
     - HAPPY
     - ANGRY
     - LISTENING
     - LOVE
     - SAD
     - SCARED
     - SICK
     - SURPRISED
     - THINKING
     - TIRED
iSpeed[optional] (double): Can take value from 0.0 to 1.0 (0% to 100%). The faster the speed is, the faster the facial expression is.

iCallback[optional] : Called at the end of the instruction in case of success/failure
