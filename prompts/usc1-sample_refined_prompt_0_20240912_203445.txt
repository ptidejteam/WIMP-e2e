You are a skilled Developer tasked with generating test cases based on a specific use case scenario.
**Task Description:**

Generate comprehensive test cases from the provided use case specification, ensuring all scenarios are covered.

Your objective is to meticulously follow the given specifications and outline all possible test cases that align with the use case scenario provided.
Here is how you should structure your response:


**Use Case Specification:**

1. **Use Case:** Fitbit Sends Data, Buddy Moves

   **1.1 Precondition:**
   - BuddyApp is running
   - FitbitApp is running
   - Connections have been initialized

   **1.2 Basic Flow:**
   1. The WIMP RECEIVES heartrate data FROM Fitbit
   2. The WIMP VALIDATES THAT heartrate is between 60 and 100 bpm 
   3. The WIMP SENDS SPEAK command to Buddy with "Normal" message
   4. Buddy's mood is SET to NEUTRAL
   5. Buddy SPEAKS "Normal"
   6. Buddy SENDS SPEAK feedback to WIMP
   7. The WIMP SENDS MOVE Command to Buddy With distance and speed parameters.
   8. Buddy SETS EnableWheels to 1 for both Left and Right Wheels
   9. Buddy MOVES with Specified distance and speed.
   10. Buddy SENDS MOVE execution feedback to WIMP
   11. WIMP RECEIVES MOVE execution feedback from Buddy
   12. Buddy's mood is SET to HAPPY

   **Postcondition:**
   - WIMP receives “WHEEL_MOVE_FINISHED” notification status
   - Buddy's mood is SET to HAPPY

   **1.3 Bounded Alternative Flow:**  
   **RFS 1-7**
   1. IF WIMP receives no heartrate data from Fitbit THEN:
   2. WIMP SENDS Rotate command to Buddy with angle and rotation speed.
   3. Buddy SETS EnableWheels to 1 for both left and right wheels.
   4. Buddy MOVES with Specified distance and speed.
   5. Buddy SENDS ROTATE Execution feedback to WIMP.
   6. WIMP RECEIVES "WHEEL_MOVE_FINISHED" feedback from Buddy.
   7. Buddy's mood is SET to NEUTRAL

   **Postcondition:**
   - Mood is set to NEUTRAL
   - Buddy has spoken "No heartrate data" and sent "Speak Action Completed" back to WIMP

   **1.4 Specific Alternative Flow:**
   **RFS 8**
   1. IF EnableWheels is not set to 1 THEN:
   2. Buddy displays "Wheels not enabled" warning message.
   3. Buddy's mood is SET to TIRED
   4. ENDIF

   **Postcondition:**
   - Buddy's mood is SET to TIRED 

**Constraints:**
If a specific operation is executed by the device, mention the device's name, method, and protocol to use. If the operation is executed by the application layer, leave it empty. Please follow the sample output format below for each operation:

```json
{
  "TC_ID": "TC001XX",
  "name": "<ScenarioName>",
  "steps": [
    {
      "operation": "Get fitbit data",
      "target": {
        "protocol": "HTTP",
        "method": "POST",
        "name": "Fitbit"
      },
      "inputs": {
        "data": "bpm"
      },
      "expectations": {
        "msg": "Receive Fitbit Data"
      }
    },
    {
      "operation": "Determine buddy action",
      "target": "",
      "inputs": {
        "data": 130
      },
      "expectation": {
        "msg": "ask Buddy Robot to move"
      }
    }
  ]
}
```

**Sample Response:**

```json
[
  {
    "TC_ID": "TC001",
    "name": "Normal Flow Scenario",
    "steps": [
      {
        "operation": "Receive heartrate data from Fitbit",
        "target": {
          "protocol": "HTTP",
          "method": "GET",
          "name": "Fitbit"
        },
        "inputs": {
          "data": "70 bpm"
        },
        "expectations": {
          "msg": "Receive Fitbit Data"
        }
      },
      {
        "operation": "Validate heartrate",
        "target": "",
        "inputs": {
          "data": 70
        },
        "expectation": {
          "msg": "heartrate is valid"
        }
      },
      {
        "operation": "Send SPEAK command to Buddy",
        "target": "",
        "inputs": {
          "message": "Normal"
        },
        "expectations": {
          "msg": "Buddy speaks 'Normal'"
        }
      },
      {
        "operation": "Send MOVE command to Buddy",
        "target": "",
        "inputs": {
          "distance": "10m",
          "speed": "5m/s"
        },
        "expectations": {
          "msg": "Buddy moves with specified distance and speed"
        }
      }
    ]
  },
  {
    "TC_ID": "TC002",
    "name": "No Fitbit Data Scenario",
    "steps": [
      {
        "operation": "Receive no heartrate data from Fitbit",
        "target": {
          "protocol": "HTTP",
          "method": "GET",
          "name": "Fitbit"
        },
        "inputs": {
          "data": null
        },
        "expectations": {
          "msg": "Receive no Fitbit Data"
        }
      },
      {
        "operation": "Send Rotate command to Buddy",
        "target": "",
        "inputs": {
          "angle": "90 degrees",
          "speed": "3 m/s"
        },
        "expectations": {
          "msg": "Buddy rotates with specified angle and speed"
        }
      }
    ]
  },
  {
    "TC_ID": "TC003",
    "name": "Wheels not enabled Scenario",
    "steps": [
      {
        "operation": "Set EnableWheels to 0",
        "target": "",
        "inputs": {
          "value": 0
        },
        "expectation": {
          "msg": "Buddy displays 'Wheels not enabled' warning message"
        }
      }
    ]
  }
]
```

** Note ** :  Ensure that the test cases cover all specified normal, bounded alternative, specific alternative flows,  postconditions in detail and the other possibiliies of tests.
